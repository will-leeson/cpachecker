#
#  CPAchecker is a tool for configurable software verification.
#  This file is part of CPAchecker.
#
#  Copyright (C) 2007-2018  Dirk Beyer
#  All rights reserved.
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
#
#
#  CPAchecker web page:
#    http://cpachecker.sosy-lab.org
#

# ----------------------------------------------------------------------
# This configuration file uses a sequential combination
# of three different analyses, namely a value analysis,
# a bounded model checking analysis with k-induction,
# and a predicate analysis, in a total of six different
# configurations.
# This configuration file also specifies the configuration
# to be used for reachability properties on recursive
# programs and for properties regarding memory safety.
# ----------------------------------------------------------------------

# The specification to check in SV-COMP'18
specification = specification/sv-comp-reachability.spc

# The file to which the witness is written (required by competition).
counterexample.export.graphml = witness.graphml
cpa.arg.proofWitness = witness.graphml
termination.violation.witness = witness.graphml
# Compression is not supported by UltimateAutomizer
counterexample.export.compressWitness = false
cpa.arg.compressWitness = false

# Multi edges are not important for our efficiency,
# but prevent precise witnesses and concurrency analysis
cpa.composite.aggregateBasicBlocks = false

# Simplified CFA is bad for witnesses
cfa.simplifyCfa = false

# Use sequential combination of analyses.
analysis.restartIntelligentAfterUnknown = true

# if we find a concurrent program, we copy the CFA to avoid colliding function names.
cfa.useCFACloningForMultiThreadedPrograms=true

# The analyses used for reachability properties.
intelligentRestartAlgorithm.configFiles = components/svcomp21--01-valueAnalysis.properties, \
                                          components/svcomp21--02-valueAnalysis-itp.properties, \
                                          components/svcomp21--03-predicateAnalysis.properties, \
                                          components/svcomp21--04-kInduction.properties, \
                                          components/pesco19--bmc.properties, \
                                          components/pesco19--recursion.properties::if-recursive, \
                                          components/pesco19--concurrency.properties::if-concurrent
intelligentRestartAlgorithm.oracle = managed
managedOracle.base = GNN
managedOracle.heuristics = cegar, bam, skip2end

# The analyses used for memory safety properties;
# everything in this file is then ignored.
memorysafety.config = svcomp21--memorysafety.properties

# This is the configuration used when verifying the overflow property;
# everything in this file is then ignored.
overflow.config = svcomp21--overflow.properties

# This is the configuration used for verifying the termination property:
# everything in this file is then ignored.
termination.config = svcomp21--termination.properties

# Tell all analyses to skip (non-explicit) recursion
analysis.summaryEdges = true
cpa.callstack.skipFunctionPointerRecursion = true
# We set skipVoidRecursion per component
# cpa.callstack.skipVoidRecursion = true

# malloc never returns null according to SV-Comp rules
cpa.predicate.memoryAllocationsAlwaysSucceed = true

limits.time.cpu = 900
limits.time.cpu::required = 900